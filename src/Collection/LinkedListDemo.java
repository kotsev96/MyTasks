package Collection;

import java.util.LinkedList;
import java.util.List;

public class LinkedListDemo {
    public static void main(String[] args) {
        // Создать связный список
        LinkedList<String> l1 = new LinkedList<>();

        // Ввести элементы в связный список
        l1.add("F");
        l1.add("B");
        l1.add("D");
        l1.add("E");
        l1.add("C");
        l1.addLast("Z");
        l1.addFirst("F");

        l1.add(1, "F");

        System.out.println("Иcxoднoe содержимое связного"
                + "списка l1 : " + l1);

        l1.remove("F"); // удалить указанные элементы
        l1.remove(2); // из связного списка
        System.out.println("Coдepжимoe связного списка l1 "
                + "после удаления элементов: " + l1);

        l1.removeFirst(); // Удалить первый и последний
        l1.removeLast(); // элементы из связного списка

        System.out.println(("Coдepжимoe связного списка 11 "
                + "после удаления первого и "
                + "последнего элементов: " + " "+ l1));

        // Получить и присвоить значение
        String val = l1.get(2);
        l1.set(2, val + " измененно");

        System.out.println("Содержимое связного списка l1 " +
                "после изменения: " + l1);
    }
}

/*
В классе LinkedList реализуется интерфейс List, и поэтому в результате вызова метода add ( Е)
элементы вводятся в конце списка, как это делается и при
вызове метода addLas t ().Чтобы ввести элементы в определенном месте списка,
следует воспользоваться формой метода add ( int, Е), как продемонстрировано
выше на примере вызова add ( 1 , "А2 " ) .
Обратите внимание, как третий элемент связного списка 11 изменяется с помощью методов get () и set ().
Чтобы получить текущее значение элемента, методу get ( ) передается индекс позиции,
на которой расположен нужный элемент.
А для того чтобы присвоить новое значение элементу на этой позиции, методу
set () передается соответствующий индекс и новое значение.
 */
