package Lambda;

// Демонстрация 2 простых лямбда выражений

// Функциональный интерфейс
interface MyValue{
    double getValue();
}
// Другой функциональный интерфейс
interface MyParamValue{
    double getValue(double v);
}

public class LammbdaDemo {
    public static void main(String[] args) {
        MyValue myVal; // Объявление ссылки на интерфейс

        /* Здесь лямбда выражение просто константа. При его назначении переменной myVal
        создается экземляр класса, в котором лямбда выражение реализует метод getValue()
        интерфейса MyValue
         */
        myVal = () -> 98.6;

        // Вызвать метод getValue(), предоставляемый ранее
        // назначенным лямбда-выражением.
        System.out.println("Пocтoяннoe значение: "+ myVal.getValue());

        /* Создать параметризованное лямбда-выражение и назначить его
        ссылке на экземпляр MyParamValue. Это лямбда-выражение
        возвращает обратную величину своего аргумента.*/
        MyParamValue myPval = (n) -> 1.0 / n;

        // Вызвать метод getValue(v) посредством ссылки myPval.
        System.out.println("Oбpaтнaя величина 4 равна " +
                myPval.getValue(4.0));
        System.out.println("Oбpaтнaя величина 8 равна " +
                myPval.getValue(8.0));

        // лямбда-выражение должно быть совместимым с методом,
        // который определяется функциональным интерфейсом. Поэтому
        // приведенные ниже два фрагмента кода не будут работать.
        // myVal = () -> "three"; // Ошибка! Тип String несовместим
        // с типом douЬle!
        // myPval = () -> Math.random(); // Ошибка! Требуется параметр!
    }
}
