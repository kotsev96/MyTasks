package Lambda;

// Демонстрация использования ссылок на статические методы

// Функциональный интерфейс для числових предикатов, которые
// воздействуют на целочисленные значения

interface  IntPredicate {
    boolean test(int n);
}

// Данный класс определяет три статических методы, которые
// проверяют соответствие целого числа определенным условиям
class MyIntPredicates {
    // Статический метод, который возвращает true, если
    // заданное число простое
    static boolean isPrime(int n){
        if(n<2) return false;
        for(int i = 2; i <= n/i; i++){
            if((n%i) == 0)
                return false;
        }
        return  true;
    }
    // Статический метода, который возвращает true, если
    // заданное число четное
    static boolean isEven(int n) {
        return(n%2) ==0;
    }

    // Статический метод, который возвращает true, если
    // заданное число положительное
    static boolean isPositive(int n){
        return n>0;
    }
}

class MethodRefDemo {
    // В данном методе типом первого параметра является
    // функциональный интерфейс. Следовательно, ему можно передать
    // ссылку на любой экземпляр этого интерфейса, в том числе и на
    // экземпляр, созданный посредством ссылки на метод.
    static boolean numTest(IntPredicate p, int v){
        return p.test(v);
    }

    public static void main(String[] args) {
        boolean result;

        // Здесь методу numTest() передается ссылка на метод isPrime()
        result = numTest(MyIntPredicates::isPrime, 17);
        if(result) System.out.println("17 - простое число");

        // Здесь методу numTest() передается ссылка на метод isEven()
        result = numTest(MyIntPredicates:: isEven, 12);
        if(result) System.out.println("12 - четное число");

        // Здесь методу numTest() передается ссылка на метод isPositive()
        result = numTest(MyIntPredicates::isPrime, 11);
        if(result) System.out.println("11 - положительное число");
    }
}

/*
В этой программе особый интерес для нас представляет следующая строка:
result = numTest(MyintPredicates::isPrime, 17);
где методу numTest () в качестве первого аргумента передается ссылка на статический
метод isPrime ().
Это можно было сделать, поскольку ссылка isPrime совместима с функциональным интерфейсом IntPredicate.
Таким образом, вычисление выражения
MyintPredicates: : isPrirne дает ссылку на объект, метод isPrirne () которого предоставляет
реализацию метода test () интерфейса IntPredicate. Остальные два вызова
метода nurnTest () работают аналогичным образом.
 */

/*
Применение ссылок на статические методы продемонстрируем с помощью приведенной ниже программы.
Сначала в программе объявляется функциональный интерфейс IntPredicate, имеющий метод test ().
 Этот метод принимает параметр типа
int и возвращает результат типа boolean. Метод предназначен для проверки того, что
заданное целое число удовлетворяет определенным условиям. Далее в программе создается класс
 MyintPredicates, содержащий три статических метода - isPrime (),
isEven () и isPosi ti ve (), соответственно предназначенных для проверки того, что
число является простым, четным или положительным. В классе MethodRefDemo создается метод numTest (),
первым параметром которого является ссылка на IntPredicate.
С помощью второго параметра задается целое число, подлежащее тестированию.
Описанные три теста выполняются в методе main () посредством вызова метода numTest () ,
которому поочередно передаются ссылки на три вышеперечисленных тестовых метода.
 */
